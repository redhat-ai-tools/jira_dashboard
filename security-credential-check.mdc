---
name: Security Credential Check
description:
globs:
alwaysApply: false
---

# Security Credential Check Rule

## üîí CRITICAL SECURITY REQUIREMENT

**BEFORE ANY COMMIT OR PUSH**: This rule must be applied to scan all files for exposed credentials, API keys, tokens, and other sensitive information.

## üö® STOP COMMIT/PUSH CONDITIONS

If ANY of the following patterns are found in plain text (not masked), **IMMEDIATELY STOP** the commit/push and alert the user:

### API Keys & Tokens
- `GEMINI_API_KEY=` followed by actual key (not placeholder)
- `X-Snowflake-Token:` followed by actual token
- `SNOWFLAKE_TOKEN=` followed by actual token
- `JIRA_PERSONAL_TOKEN=` followed by actual token
- Any string matching pattern: `AIzaSy[A-Za-z0-9_-]{33}` (Google API keys)
- Any string matching pattern: `eyJ[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*` (JWT tokens)

### Database & Service URLs
- Connection strings with embedded credentials
- URLs with authentication tokens in query parameters
- Database passwords in plain text

### Common Patterns to Flag
```regex
# API Keys
(api[_-]?key|apikey)\s*[:=]\s*["\']?[a-zA-Z0-9]{20,}["\']?

# Tokens
(token|access[_-]?token)\s*[:=]\s*["\']?[a-zA-Z0-9._-]{20,}["\']?

# Passwords
(password|pwd)\s*[:=]\s*["\']?[^\s"']{8,}["\']?

# JWT Tokens
eyJ[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*

# Google API Keys
AIzaSy[A-Za-z0-9_-]{33}

# AWS Keys
AKIA[0-9A-Z]{16}

# GitHub Tokens
ghp_[a-zA-Z0-9]{36}
```

## ‚úÖ ACCEPTABLE FORMATS (These are OK to commit)

### Masked/Placeholder Values
```bash
# Environment variable placeholders
export GEMINI_API_KEY="your-gemini-api-key-here"
export SNOWFLAKE_TOKEN="your-snowflake-token"
JIRA_PERSONAL_TOKEN=your_token_here

# Masked in documentation
X-Snowflake-Token: eyJ***MASKED***
API_KEY: "AIzaSy***REDACTED***"
```

### Environment Variable References
```python
# Reading from environment (OK)
api_key = os.getenv("GEMINI_API_KEY")
token = os.environ.get("SNOWFLAKE_TOKEN")
```

### Configuration Templates
```yaml
# Template files with placeholders
api_key: ${GEMINI_API_KEY}
token: "{{ SNOWFLAKE_TOKEN }}"
```

## üîß REQUIRED ACTIONS WHEN CREDENTIALS FOUND

### 1. Immediate Actions
- **STOP** the commit/push operation
- **ALERT** with specific file and line number
- **SHOW** the exposed credential pattern (partially masked)

### 2. Remediation Steps
1. **Replace** actual values with environment variables
2. **Add** sensitive files to `.gitignore` if needed
3. **Use** placeholder values in documentation
4. **Mask** tokens in examples (show only first/last few characters)

### 3. Example Fix
```diff
# BEFORE (‚ùå BLOCKED)
- GEMINI_API_KEY = "AIzaSyD9gW8PGuhV6l_4Au6glbw_dfxIoYN48AQ"

# AFTER (‚úÖ ALLOWED)
+ GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
+ # Example: GEMINI_API_KEY="AIzaSy***YOUR_KEY_HERE***"
```

## üìÅ FILES TO ALWAYS CHECK

This rule applies to ALL files, but pay special attention to:
- `*.py` - Python scripts
- `*.yaml`, `*.yml` - Configuration files
- `*.json` - Config and data files
- `*.md` - Documentation files
- `*.sh`, `*.bash` - Shell scripts
- `*.env*` - Environment files
- `requirements*.txt` - Dependency files

## üîç SCAN COMMAND CHECKLIST

Before each commit, verify these files specifically:
- [consolidated_konflux_summary.py](mdc:consolidated_konflux_summary.py)
- [agents.yaml](mdc:agents.yaml)
- [tasks.yaml](mdc:tasks.yaml)
- [critical_bug_calculator.py](mdc:critical_bug_calculator.py)
- [blocker_bug_calculator.py](mdc:blocker_bug_calculator.py)
- [full_epic_activity_analysis.py](mdc:full_epic_activity_analysis.py)
- Any new `.py` files
- Any new `.yaml` or `.json` files

## üö® ALERT MESSAGE FORMAT

When credentials are detected:
```
üîí SECURITY ALERT: EXPOSED CREDENTIALS DETECTED
File: {filename}:{line_number}
Pattern: {credential_type}
Value: {first_3_chars}***{last_3_chars}

‚ùå COMMIT/PUSH BLOCKED
üîß Action Required: Replace with environment variable or mask the value
üìñ See security-credential-check.mdc for remediation steps
```

## ‚ö†Ô∏è EXEMPTIONS (Use with Extreme Caution)

Only allow commits with exposed credentials if:
1. They are clearly marked as examples/templates
2. They are dummy/fake values for testing
3. They are in documentation showing proper masking
4. **NEVER** for production keys/tokens

---

**Remember**: It's better to be overly cautious with security than to accidentally expose real credentials!
